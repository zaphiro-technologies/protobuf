syntax = "proto3";

/* <!-- markdownlint-disable --> 
Messages to support coordination among processes/services in the platform.
At the time being this is a proof of concept. Different changes may occurs
when we actually start to use the event driven approach to coordinate
services. */ 

package platform.v1;
option go_package = "./platform/v1";

//The different type of tasks run by the real time processing.

enum TaskType {
	TASK_TYPE_UNSPECIFIED = 0;
	TASK_TYPE_COLLECTION = 1;
	TASK_TYPE_TOPOLOGY = 2;
	TASK_TYPE_STATE = 3;
	TASK_TYPE_FAULT = 4;
}

//The different type of notifications generated by the real time processing.

enum NotificationType {
	NOTIFICATION_TYPE_UNSPECIFIED = 0;
	NOTIFICATION_TYPE_DATA_COMPLETE = 1;
	NOTIFICATION_TYPE_DATA_TIMEOUT_1 = 2;
	NOTIFICATION_TYPE_DATA_TIMEOUT_2 = 3;
	NOTIFICATION_TYPE_TRIGGER = 4;
}

// A parameter of a `Task` or `Notification`

message Parameter {
	string name = 1; //The parameter name
	string value = 2; //The parameter value
}

// A task message.
// Headers used in rabbitMQ:
// * `id`: id of the `Task`
// * `type`: always `Task`
// * `producerId`: the id of the producer (e.g. a PMU) linked to the notification.
// * `timestampId`: related measurement timestamp (if any)
// * `taskType`: The textual representation of the task type.

message Task {
	TaskType taskType = 1; //Type of the task
	int64 createdAt = 2; //Task creation time (Unix Nano timestamp)
	repeated Parameter parameters = 3;
}

// A notification message.
// Headers used in rabbitMQ:
// * `id`: id of the `Notification`
// * `type`: always `Notification`
// * `producerId`: the id of the producer (e.g. a PMU) linked to the notification.
// * `timestampId`: related measurement timestamp (if any)
// * `notificationType`: The textual representation of the notification type.

message Notification {
	NotificationType notificationType = 1; //Notification type
	int64 createdAt = 2; //Notification creation time (Unix Nano timestamp)
	string message = 3; //Notification message, it can be a string or a integer (which maps to a enum value).
	repeated Parameter parameters = 4;
}

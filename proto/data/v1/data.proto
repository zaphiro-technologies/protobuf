syntax = "proto3";

/*  <!-- markdownlint-disable -->
Messages to support data injection in the platform.
The data injected may be originated from different sources (e.g. a PMU, RTU, an external service).

Data are grouped into sets, where each id identifies a specific measurement. The id does not identify the instance of measurement, but the class of measurement. Measurement ID can be used to retrieve additional medata about the measurement, from example, in the CIM OP profile associated to the monitored grid. */

package data.v1;
option go_package = "./data/v1";

/* The collection of Data Types defined so far. They are useful to map
measurements to their rappresentation. This is important since all measurements
are any how cast to UINT64 in the real time platform */

enum DataType {
	DATA_TYPE_UNSPECIFIED = 0; //No type define
	DATA_TYPE_ACTIVE_POWER = 1; //Active Power. It maps to an Analog.
	DATA_TYPE_ANGLE = 2; //Angle. It maps to an Analog.
	DATA_TYPE_AUTOMATIC = 3; //Auomatic. It maps to Discrete (True or False).
	DATA_TYPE_BOOLEAN = 4; //Booleam. It maps to Discrete (True or False).
	DATA_TYPE_CONFIG_CHANGE = 5; // Configuration change.  It maps to Discrete (True or False).
	DATA_TYPE_CURRENT_SEQUENCE_NEGATIVE = 6; //PHASOR
	DATA_TYPE_CURRENT_SEQUENCE_POSITIVE = 7; //PHASOR
	DATA_TYPE_CURRENT_SEQUENCE_ZERO = 8; //PHASOR
	DATA_TYPE_DATA_ERROR = 9; //DISCRETE (True or False)
	DATA_TYPE_DATA_MODIFIED = 10; //DISCRETE (True or False)
	DATA_TYPE_DATA_SORTING = 11; //DISCRETE
	DATA_TYPE_ENERGY = 12; //ANALOG
	DATA_TYPE_FREQUENCY = 13; //ANALOG
	DATA_TYPE_LINE_CURRENT = 14; //ANALOG
	DATA_TYPE_LINE_TO_LINE_VOLTAGE = 15; //ANALOG
	DATA_TYPE_LOCAL_OPERATION = 16; //DISCRETE
	DATA_TYPE_OPERATION_COUNT = 17; //DISCRETE
	DATA_TYPE_PACKET_LATENCY = 18; //ANALOG
	DATA_TYPE_PHASE_VOLTAGE = 19; //ANALOG
	DATA_TYPE_PHASOR_CURRENT = 20; //PHASOR
	DATA_TYPE_PHASOR_VOLTAGE = 21; //PHASOR
	DATA_TYPE_PMU_SYNC = 22; //DISCRETE (True or False)
	DATA_TYPE_PMU_TIME_QUALITY = 23; //DISCRETE
	DATA_TYPE_PMU_TRIGGER_DETECTED = 24; //DISCRETE (True or False)
	DATA_TYPE_POWER = 25; //ANALOG
	DATA_TYPE_POWER_FACTOR = 26; //ANALOG
	DATA_TYPE_PRESSURE = 27; //ANALOG
	DATA_TYPE_RATE_OF_CHANGE_OF_FREQUENCY = 28; //ANALOG
	DATA_TYPE_REACTIVE_POWER = 29; //ANALOG
	DATA_TYPE_SWITCH_POSITION = 30; //DISCRETE (True or False)
	DATA_TYPE_TAP_POSITION = 31; //DISCRETE
	DATA_TYPE_TEMPERATURE = 32; //ANALOG
	DATA_TYPE_THREE_PHASE_ACTIVE_POWER = 33; //ANALOG
	DATA_TYPE_THREE_PHASE_CURRENT = 34; //ANALOG
	DATA_TYPE_THREE_PHASE_POWER = 35; //ANALOG
	DATA_TYPE_THREE_PHASE_POWER_FACTOR = 36; //ANALOG
	DATA_TYPE_THREE_PHASE_REACTIVE_POWER = 37; //ANALOG
	DATA_TYPE_TRIGGER_REASON = 38; //DISCRETE
	DATA_TYPE_UNLOCKED_TIME = 39;  //DISCRETE
	DATA_TYPE_VOLTAGE_SEQUENCE_NEGATIVE = 40; //PHASOR
	DATA_TYPE_VOLTAGE_SEQUENCE_POSITIVE = 41; //PHASOR
	DATA_TYPE_VOLTAGE_SEQUENCE_ZERO = 42; //PHASOR
	DATA_TYPE_DISCRETE = 43; //DISCRETE
	DATA_TYPE_ANALOG = 44; //ANALOG
}

/* A single data. It has:
- a given data type,
- a point in time of measurement (encoded as int64 using Unix Epoc),
- a value (encoded as uint64) */

message Data {
	DataType dataType = 1;
	int64 measuredAt = 2;
	optional uint64 value = 3;	
}

/* A set of data:
- the id of the procuder of the data
- the map containing data */

message DataSet {
	string producerId = 1;
	map<string, Data> data = 2;
}

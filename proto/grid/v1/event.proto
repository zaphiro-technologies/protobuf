syntax = "proto3";

/*  <!-- markdownlint-disable -->
Messages to support event detection in the platform.
The event detected may be originated from different sources: devices (e.g. a PMU, RTU), services (e.g. state estimator), or an external service (e.g. SCADA).
*/

package grid.v1;
option go_package = "./grid/v1";

/* The collection of Event Status defined so far.*/

enum EventStatus {
    EVENT_STATUS_UNSPECIFIED = 0; //No status defined
    EVENT_STATUS_ACTIVE = 1; //Event is still active
    EVENT_STATUS_COMPLETE = 2; //Event is completed
    EVENT_STATUS_UNKNOWN = 3; //Information available don't allow us to know if the even is active or complete
}
 
enum EventSourceType {
    EVENT_SOURCE_UNSPECIFIED = 0; //No source type defined
    EVENT_SOURCE_DEVICE = 1; //The source of the event was a device (e.g. PMU)
    EVENT_SOURCE_SERVICE = 2; //The source of the event was a service (e.g. state estimator)
    EVENT_SOURCE_EXTERNAL_SERVICE = 3; //The source of the event was a service external to SynchroGuard platform (e.g. SCADA)
}

/* A generic event.
Headers used in rabbitMQ (only if not sent as part of `DataSet`):
* `id`: id of the `Event`
* `type`: always `Event`
* `sourceId`: the id of the source (e.g. a PMU) that generated the event.
* `timestampId`: related measurement Unix msec timestamp (if any)
*/

message Event {
	EventSourceType sourceType = 1; //The type of data see `DataType` enum.
	optional int64 occurredAt = 2; //The time of occurency of the event (Unix msec timestamp).
  optional int64 detectedAt = 3; //The time of detection of the event (Unix msec timestamp).
	optional uint64 value = 4; //The data value casted to uint64.
  string message = 5; //Event message.
  optional EventStatus status = 6; //The status of the event.
}

syntax = "proto3";

/*  <!-- markdownlint-disable -->
Messages to support grid event detection in the platform. Grid events are sub classes of Events.
*/

package grid.v1;
option go_package = "./grid/v1";


import "grid/v1/event.proto";
import "grid/v1/fault.proto";

/* A grid event.
Headers used in rabbitMQ (only if not sent as part of `DataSet`):
* `id`: id of the `Event`
* `type`: always `Event`
* `sourceId`: the id of the source (e.g. a PMU) that generated the event.
* `timestampId`: related measurement Unix msec timestamp (if any)
*/

message GridEvent {
  Event event = 1; //The base event message
  string componentID = 2; //The ID of the component where the event occurred.
  optional string substationID = 3; //The ID of the substation where the event occurred.
  int64 startedAt = 4; //The timestamp where the event started (should be equal to timestampId in header).
  optional int64 endedAt = 5; //The timestamp where the event ended.
  double nominalValue = 6; //The measured / estimated value in relation to the event (e.g. in the case of a `VoltageEvent` is the voltage, in the case of a `CurrentEvent` is the current event).
  double percentage = 7; //The percentage reached by the value compared to the reference limit or expected value.
  optional double probability = 8; //The probability that the event actually occurred.
}

message VoltageEvent {
  GridEvent event = 1; //The base grid event message
  optional PhaseCode phaseCode = 2;  //The phase for which the event occured
}

message CurrentEvent {
  GridEvent event = 1;  //The base grid event message
}

message PhaseEvent {
  GridEvent event = 1;  //The base grid event message
}

message FrequencyEvent {
  GridEvent event = 1;  //The base grid event message
}

message LineCongestion  {
  CurrentEvent  event = 1; //The base current grid event message
}

message TransformerCongestion  {
  CurrentEvent  event = 1; //The base current grid event message
}

message VoltageUnbalance {
  VoltageEvent event = 1; //The base voltage grid event message
}

message VoltageDip {
  VoltageEvent event = 1; //The base voltage grid event message
}

message VoltageInterruption {
  VoltageEvent event = 1; //The base voltage grid event message
}

message VoltageSwell {
  VoltageEvent event = 1; //The base voltage grid event message
}

message VoltageLimit {
  VoltageEvent event = 1; //The base voltage grid event message
}

message VoltageRapidChange {
  VoltageEvent event = 1; //The base voltage grid event message 
}

message OverFrequency {
  FrequencyEvent event = 1; //The base frequency grid event message
}

message UnderFrequency {
  FrequencyEvent event = 1; //The base frequency grid event message
}

message SteadyOscillation {
  PhaseEvent event = 1; //The base phase grid event message
}

message TransientOscillation {
  PhaseEvent event = 1; //The base phase grid event message
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: grid/v1/topology.proto

//  <!-- markdownlint-disable -->
//Messages to support topology data exchange in the platform.

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Topology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt int64  `protobuf:"varint,1,opt,name=createdAt,proto3" json:"createdAt,omitempty"` // The time of creation of the topology data (Unix msec timestamp).
	Tp        []byte `protobuf:"bytes,2,opt,name=tp,proto3" json:"tp,omitempty"`                // The TP profile file serialized as bytes.
}

func (x *Topology) Reset() {
	*x = Topology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grid_v1_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_grid_v1_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_grid_v1_topology_proto_rawDescGZIP(), []int{0}
}

func (x *Topology) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Topology) GetTp() []byte {
	if x != nil {
		return x.Tp
	}
	return nil
}

// A topology Node information.
// To be used in ComputedTopology message.
type TopologicalNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminalIds                 []string `protobuf:"bytes,1,rep,name=TerminalIds,proto3" json:"TerminalIds,omitempty"`                                 //The list of Terminal ids in the TopologicalNode.
	ConnectivityNodeIds         []string `protobuf:"bytes,2,rep,name=ConnectivityNodeIds,proto3" json:"ConnectivityNodeIds,omitempty"`                 //The list of ConnectivityNode ids in the TopologicalNode.
	PowerTransferEndIds         []string `protobuf:"bytes,3,rep,name=PowerTransferEndIds,proto3" json:"PowerTransferEndIds,omitempty"`                 //The list of PowerTransferEnd ids in the TopologicalNode.
	ConnectivityNodeContainerId string   `protobuf:"bytes,4,opt,name=ConnectivityNodeContainerId,proto3" json:"ConnectivityNodeContainerId,omitempty"` //The id of the ConnectivityNodeContainer in the TopologicalNode.
	BaseVoltageId               string   `protobuf:"bytes,5,opt,name=BaseVoltageId,proto3" json:"BaseVoltageId,omitempty"`                             //The id of the BaseVoltage in the TopologicalNode.
	BaseVoltage                 float64  `protobuf:"fixed64,6,opt,name=BaseVoltage,proto3" json:"BaseVoltage,omitempty"`                               //The BaseVoltage in the TopologicalNode.
}

func (x *TopologicalNode) Reset() {
	*x = TopologicalNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grid_v1_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologicalNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologicalNode) ProtoMessage() {}

func (x *TopologicalNode) ProtoReflect() protoreflect.Message {
	mi := &file_grid_v1_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologicalNode.ProtoReflect.Descriptor instead.
func (*TopologicalNode) Descriptor() ([]byte, []int) {
	return file_grid_v1_topology_proto_rawDescGZIP(), []int{1}
}

func (x *TopologicalNode) GetTerminalIds() []string {
	if x != nil {
		return x.TerminalIds
	}
	return nil
}

func (x *TopologicalNode) GetConnectivityNodeIds() []string {
	if x != nil {
		return x.ConnectivityNodeIds
	}
	return nil
}

func (x *TopologicalNode) GetPowerTransferEndIds() []string {
	if x != nil {
		return x.PowerTransferEndIds
	}
	return nil
}

func (x *TopologicalNode) GetConnectivityNodeContainerId() string {
	if x != nil {
		return x.ConnectivityNodeContainerId
	}
	return ""
}

func (x *TopologicalNode) GetBaseVoltageId() string {
	if x != nil {
		return x.BaseVoltageId
	}
	return ""
}

func (x *TopologicalNode) GetBaseVoltage() float64 {
	if x != nil {
		return x.BaseVoltage
	}
	return 0
}

// A topology Island information.
// To be used in ComputedTopology message.
type TopologicalIsland struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologicalNodeIds []string `protobuf:"bytes,1,rep,name=TopologicalNodeIds,proto3" json:"TopologicalNodeIds,omitempty"` //The list of TopologicalNode ids in the TopologicalIsland.
}

func (x *TopologicalIsland) Reset() {
	*x = TopologicalIsland{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grid_v1_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologicalIsland) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologicalIsland) ProtoMessage() {}

func (x *TopologicalIsland) ProtoReflect() protoreflect.Message {
	mi := &file_grid_v1_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologicalIsland.ProtoReflect.Descriptor instead.
func (*TopologicalIsland) Descriptor() ([]byte, []int) {
	return file_grid_v1_topology_proto_rawDescGZIP(), []int{2}
}

func (x *TopologicalIsland) GetTopologicalNodeIds() []string {
	if x != nil {
		return x.TopologicalNodeIds
	}
	return nil
}

// A processed topology information.
// Headers used in rabbitMQ:
// `id` (string): id of the `Topology`
// `type` (string): always `ComputedTopology`
// `producerId` (string): the id of the producer (e.g. a PMU) linked to the dataset.
// `timestampId` (int64): related measurement Unix msec timestamp (if any)
// `subnetworkId` (string): the sub network id for which the topology was computed
type ComputedTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EqId               string                        `protobuf:"bytes,1,opt,name=eqId,proto3" json:"eqId,omitempty"`                                                                                                                     //The id of the EQ file used.
	TopologicalNodes   map[string]*TopologicalNode   `protobuf:"bytes,2,rep,name=topologicalNodes,proto3" json:"topologicalNodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`     //The map of TopologicalNodes in the Topology.
	TopologicalIslands map[string]*TopologicalIsland `protobuf:"bytes,3,rep,name=topologicalIslands,proto3" json:"topologicalIslands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //The map of TopologicalIslands in the Topology.
}

func (x *ComputedTopology) Reset() {
	*x = ComputedTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grid_v1_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedTopology) ProtoMessage() {}

func (x *ComputedTopology) ProtoReflect() protoreflect.Message {
	mi := &file_grid_v1_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedTopology.ProtoReflect.Descriptor instead.
func (*ComputedTopology) Descriptor() ([]byte, []int) {
	return file_grid_v1_topology_proto_rawDescGZIP(), []int{3}
}

func (x *ComputedTopology) GetEqId() string {
	if x != nil {
		return x.EqId
	}
	return ""
}

func (x *ComputedTopology) GetTopologicalNodes() map[string]*TopologicalNode {
	if x != nil {
		return x.TopologicalNodes
	}
	return nil
}

func (x *ComputedTopology) GetTopologicalIslands() map[string]*TopologicalIsland {
	if x != nil {
		return x.TopologicalIslands
	}
	return nil
}

var File_grid_v1_topology_proto protoreflect.FileDescriptor

var file_grid_v1_topology_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x22, 0x38, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x70, 0x22, 0xa1, 0x02, 0x0a, 0x0f,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x42, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22,
	0x43, 0x0a, 0x11, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x71, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x71, 0x49, 0x64, 0x12, 0x5b, 0x0a,
	0x10, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x5d, 0x0a,
	0x15, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x17,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x67, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grid_v1_topology_proto_rawDescOnce sync.Once
	file_grid_v1_topology_proto_rawDescData = file_grid_v1_topology_proto_rawDesc
)

func file_grid_v1_topology_proto_rawDescGZIP() []byte {
	file_grid_v1_topology_proto_rawDescOnce.Do(func() {
		file_grid_v1_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_grid_v1_topology_proto_rawDescData)
	})
	return file_grid_v1_topology_proto_rawDescData
}

var file_grid_v1_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_grid_v1_topology_proto_goTypes = []interface{}{
	(*Topology)(nil),          // 0: grid.v1.Topology
	(*TopologicalNode)(nil),   // 1: grid.v1.TopologicalNode
	(*TopologicalIsland)(nil), // 2: grid.v1.TopologicalIsland
	(*ComputedTopology)(nil),  // 3: grid.v1.ComputedTopology
	nil,                       // 4: grid.v1.ComputedTopology.TopologicalNodesEntry
	nil,                       // 5: grid.v1.ComputedTopology.TopologicalIslandsEntry
}
var file_grid_v1_topology_proto_depIdxs = []int32{
	4, // 0: grid.v1.ComputedTopology.topologicalNodes:type_name -> grid.v1.ComputedTopology.TopologicalNodesEntry
	5, // 1: grid.v1.ComputedTopology.topologicalIslands:type_name -> grid.v1.ComputedTopology.TopologicalIslandsEntry
	1, // 2: grid.v1.ComputedTopology.TopologicalNodesEntry.value:type_name -> grid.v1.TopologicalNode
	2, // 3: grid.v1.ComputedTopology.TopologicalIslandsEntry.value:type_name -> grid.v1.TopologicalIsland
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_grid_v1_topology_proto_init() }
func file_grid_v1_topology_proto_init() {
	if File_grid_v1_topology_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grid_v1_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grid_v1_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologicalNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grid_v1_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologicalIsland); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grid_v1_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grid_v1_topology_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_grid_v1_topology_proto_goTypes,
		DependencyIndexes: file_grid_v1_topology_proto_depIdxs,
		MessageInfos:      file_grid_v1_topology_proto_msgTypes,
	}.Build()
	File_grid_v1_topology_proto = out.File
	file_grid_v1_topology_proto_rawDesc = nil
	file_grid_v1_topology_proto_goTypes = nil
	file_grid_v1_topology_proto_depIdxs = nil
}

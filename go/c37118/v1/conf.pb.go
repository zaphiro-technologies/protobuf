// Copyright 2024 Zaphiro Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: zaphiro/c37118/v1/conf.proto

// <!-- markdownlint-disable -->
//Messages describing PMU C37.118 Configurations.
//See
//[C37.118](https://www.typhoon-hil.com/documentation/typhoon-hil-software-manual/References/c37_118_protocol.html)
//protocol.

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the frame type part of the SYNC word
// (e.g., 0=Data, 1=Header, 2=CFG1, 3=CFG2, 4=CMD, 5=CFG3)
// These correspond to the 'X' nibble in the SYNC word 0xAAXY.
type FrameType int32

const (
	FrameType_FRAME_TYPE_UNSPECIFIED FrameType = 0
	FrameType_FRAME_TYPE_DATA        FrameType = 1
	FrameType_FRAME_TYPE_HEADER      FrameType = 2
	FrameType_FRAME_TYPE_CONFIG_1    FrameType = 3
	FrameType_FRAME_TYPE_CONFIG_2    FrameType = 4
	FrameType_FRAME_TYPE_COMMAND     FrameType = 5
	FrameType_FRAME_TYPE_CONFIG_3    FrameType = 6
)

// Enum value maps for FrameType.
var (
	FrameType_name = map[int32]string{
		0: "FRAME_TYPE_UNSPECIFIED",
		1: "FRAME_TYPE_DATA",
		2: "FRAME_TYPE_HEADER",
		3: "FRAME_TYPE_CONFIG_1",
		4: "FRAME_TYPE_CONFIG_2",
		5: "FRAME_TYPE_COMMAND",
		6: "FRAME_TYPE_CONFIG_3",
	}
	FrameType_value = map[string]int32{
		"FRAME_TYPE_UNSPECIFIED": 0,
		"FRAME_TYPE_DATA":        1,
		"FRAME_TYPE_HEADER":      2,
		"FRAME_TYPE_CONFIG_1":    3,
		"FRAME_TYPE_CONFIG_2":    4,
		"FRAME_TYPE_COMMAND":     5,
		"FRAME_TYPE_CONFIG_3":    6,
	}
)

func (x FrameType) Enum() *FrameType {
	p := new(FrameType)
	*p = x
	return p
}

func (x FrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_zaphiro_c37118_v1_conf_proto_enumTypes[0].Descriptor()
}

func (FrameType) Type() protoreflect.EnumType {
	return &file_zaphiro_c37118_v1_conf_proto_enumTypes[0]
}

func (x FrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrameType.Descriptor instead.
func (FrameType) EnumDescriptor() ([]byte, []int) {
	return file_zaphiro_c37118_v1_conf_proto_rawDescGZIP(), []int{0}
}

type ConfFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *ConfHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`                      // Configuration frame 2 header
	Configs   []*Config   `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`                    // Set of PMU configurations
	DATA_RATE uint32      `protobuf:"varint,3,opt,name=DATA_RATE,json=DATARATE,proto3" json:"DATA_RATE,omitempty"` // Rate of data transmission
}

func (x *ConfFrame) Reset() {
	*x = ConfFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfFrame) ProtoMessage() {}

func (x *ConfFrame) ProtoReflect() protoreflect.Message {
	mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfFrame.ProtoReflect.Descriptor instead.
func (*ConfFrame) Descriptor() ([]byte, []int) {
	return file_zaphiro_c37118_v1_conf_proto_rawDescGZIP(), []int{0}
}

func (x *ConfFrame) GetHeader() *ConfHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ConfFrame) GetConfigs() []*Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *ConfFrame) GetDATA_RATE() uint32 {
	if x != nil {
		return x.DATA_RATE
	}
	return 0
}

type ConfHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SYNC      uint32  `protobuf:"varint,1,opt,name=SYNC,proto3" json:"SYNC,omitempty"`                         // Sync byte followed by frame type and version number
	FRAMESIZE uint32  `protobuf:"varint,2,opt,name=FRAMESIZE,proto3" json:"FRAMESIZE,omitempty"`               // Number of bytes in the frame
	IDCODE    uint32  `protobuf:"varint,3,opt,name=IDCODE,proto3" json:"IDCODE,omitempty"`                     // Stream source ID number
	SOC       uint32  `protobuf:"varint,4,opt,name=SOC,proto3" json:"SOC,omitempty"`                           // SOC time stamp
	FRACSEC   uint32  `protobuf:"varint,5,opt,name=FRACSEC,proto3" json:"FRACSEC,omitempty"`                   // Fraction of Second and Message Time Quality
	TIME_BASE uint32  `protobuf:"varint,6,opt,name=TIME_BASE,json=TIMEBASE,proto3" json:"TIME_BASE,omitempty"` // Resolution of FRACSEC time stamp
	NUM_PMU   uint32  `protobuf:"varint,7,opt,name=NUM_PMU,json=NUMPMU,proto3" json:"NUM_PMU,omitempty"`       // The number of PMUs included in the data frame
	Version   *uint32 `protobuf:"varint,8,opt,name=version,proto3,oneof" json:"version,omitempty"`             // Protocol version derived from SYNC
}

func (x *ConfHeader) Reset() {
	*x = ConfHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfHeader) ProtoMessage() {}

func (x *ConfHeader) ProtoReflect() protoreflect.Message {
	mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfHeader.ProtoReflect.Descriptor instead.
func (*ConfHeader) Descriptor() ([]byte, []int) {
	return file_zaphiro_c37118_v1_conf_proto_rawDescGZIP(), []int{1}
}

func (x *ConfHeader) GetSYNC() uint32 {
	if x != nil {
		return x.SYNC
	}
	return 0
}

func (x *ConfHeader) GetFRAMESIZE() uint32 {
	if x != nil {
		return x.FRAMESIZE
	}
	return 0
}

func (x *ConfHeader) GetIDCODE() uint32 {
	if x != nil {
		return x.IDCODE
	}
	return 0
}

func (x *ConfHeader) GetSOC() uint32 {
	if x != nil {
		return x.SOC
	}
	return 0
}

func (x *ConfHeader) GetFRACSEC() uint32 {
	if x != nil {
		return x.FRACSEC
	}
	return 0
}

func (x *ConfHeader) GetTIME_BASE() uint32 {
	if x != nil {
		return x.TIME_BASE
	}
	return 0
}

func (x *ConfHeader) GetNUM_PMU() uint32 {
	if x != nil {
		return x.NUM_PMU
	}
	return 0
}

func (x *ConfHeader) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	STN     string   `protobuf:"bytes,1,opt,name=STN,proto3" json:"STN,omitempty"`                  // Station name
	IDCODE  uint32   `protobuf:"varint,2,opt,name=IDCODE,proto3" json:"IDCODE,omitempty"`           // Data source ID number
	FORMAT  uint32   `protobuf:"varint,3,opt,name=FORMAT,proto3" json:"FORMAT,omitempty"`           // Data format within data frame
	PHNMR   uint32   `protobuf:"varint,4,opt,name=PHNMR,proto3" json:"PHNMR,omitempty"`             // Number of phasors
	ANNMR   uint32   `protobuf:"varint,5,opt,name=ANNMR,proto3" json:"ANNMR,omitempty"`             // Number of analog values
	DGNMR   uint32   `protobuf:"varint,6,opt,name=DGNMR,proto3" json:"DGNMR,omitempty"`             // Number of digital status words
	CHNAM   string   `protobuf:"bytes,7,opt,name=CHNAM,proto3" json:"CHNAM,omitempty"`              // Phasor and channel names
	PHUNIT  []uint32 `protobuf:"varint,8,rep,packed,name=PHUNIT,proto3" json:"PHUNIT,omitempty"`    // Conversion factor for phasor channels
	ANUNIT  []uint32 `protobuf:"varint,9,rep,packed,name=ANUNIT,proto3" json:"ANUNIT,omitempty"`    // Conversion factor for analog channels
	DIGUNIT []uint32 `protobuf:"varint,10,rep,packed,name=DIGUNIT,proto3" json:"DIGUNIT,omitempty"` // Mask words for digital status words
	FNOM    uint32   `protobuf:"varint,11,opt,name=FNOM,proto3" json:"FNOM,omitempty"`              // Nominal line frequency code and flags
	CFGCNT  uint32   `protobuf:"varint,12,opt,name=CFGCNT,proto3" json:"CFGCNT,omitempty"`          // Configuration change count
	// --- Config Frame 3 Specific Fields (Optional) ---
	G_PMU_ID  []byte           `protobuf:"bytes,13,opt,name=G_PMU_ID,json=GPMUID,proto3,oneof" json:"G_PMU_ID,omitempty"`     // 16 bytes. Meaning is user-defined.
	PHSCALE   []*PhasorScaling `protobuf:"bytes,16,rep,name=PHSCALE,proto3" json:"PHSCALE,omitempty"`                         // Config-3 phasor scaling
	ANSCALE   []*AnalogScaling `protobuf:"bytes,17,rep,name=ANSCALE,proto3" json:"ANSCALE,omitempty"`                         // Config-3 analog scaling
	PMU_LAT   *float32         `protobuf:"fixed32,18,opt,name=PMU_LAT,json=PMULAT,proto3,oneof" json:"PMU_LAT,omitempty"`     // Latitude
	PMU_LON   *float32         `protobuf:"fixed32,19,opt,name=PMU_LON,json=PMULON,proto3,oneof" json:"PMU_LON,omitempty"`     // Longitude
	PMU_ELEV  *float32         `protobuf:"fixed32,20,opt,name=PMU_ELEV,json=PMUELEV,proto3,oneof" json:"PMU_ELEV,omitempty"`  // Elevation
	SVC_CLASS *string          `protobuf:"bytes,21,opt,name=SVC_CLASS,json=SVCCLASS,proto3,oneof" json:"SVC_CLASS,omitempty"` // Service Class ('M' or 'P')
	WINDOW    *uint32          `protobuf:"varint,22,opt,name=WINDOW,proto3,oneof" json:"WINDOW,omitempty"`                    // Phasor Measurement Window Length
	GRP_DLY   *uint32          `protobuf:"varint,23,opt,name=GRP_DLY,json=GRPDLY,proto3,oneof" json:"GRP_DLY,omitempty"`      // Group Delay
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_zaphiro_c37118_v1_conf_proto_rawDescGZIP(), []int{2}
}

func (x *Config) GetSTN() string {
	if x != nil {
		return x.STN
	}
	return ""
}

func (x *Config) GetIDCODE() uint32 {
	if x != nil {
		return x.IDCODE
	}
	return 0
}

func (x *Config) GetFORMAT() uint32 {
	if x != nil {
		return x.FORMAT
	}
	return 0
}

func (x *Config) GetPHNMR() uint32 {
	if x != nil {
		return x.PHNMR
	}
	return 0
}

func (x *Config) GetANNMR() uint32 {
	if x != nil {
		return x.ANNMR
	}
	return 0
}

func (x *Config) GetDGNMR() uint32 {
	if x != nil {
		return x.DGNMR
	}
	return 0
}

func (x *Config) GetCHNAM() string {
	if x != nil {
		return x.CHNAM
	}
	return ""
}

func (x *Config) GetPHUNIT() []uint32 {
	if x != nil {
		return x.PHUNIT
	}
	return nil
}

func (x *Config) GetANUNIT() []uint32 {
	if x != nil {
		return x.ANUNIT
	}
	return nil
}

func (x *Config) GetDIGUNIT() []uint32 {
	if x != nil {
		return x.DIGUNIT
	}
	return nil
}

func (x *Config) GetFNOM() uint32 {
	if x != nil {
		return x.FNOM
	}
	return 0
}

func (x *Config) GetCFGCNT() uint32 {
	if x != nil {
		return x.CFGCNT
	}
	return 0
}

func (x *Config) GetG_PMU_ID() []byte {
	if x != nil {
		return x.G_PMU_ID
	}
	return nil
}

func (x *Config) GetPHSCALE() []*PhasorScaling {
	if x != nil {
		return x.PHSCALE
	}
	return nil
}

func (x *Config) GetANSCALE() []*AnalogScaling {
	if x != nil {
		return x.ANSCALE
	}
	return nil
}

func (x *Config) GetPMU_LAT() float32 {
	if x != nil && x.PMU_LAT != nil {
		return *x.PMU_LAT
	}
	return 0
}

func (x *Config) GetPMU_LON() float32 {
	if x != nil && x.PMU_LON != nil {
		return *x.PMU_LON
	}
	return 0
}

func (x *Config) GetPMU_ELEV() float32 {
	if x != nil && x.PMU_ELEV != nil {
		return *x.PMU_ELEV
	}
	return 0
}

func (x *Config) GetSVC_CLASS() string {
	if x != nil && x.SVC_CLASS != nil {
		return *x.SVC_CLASS
	}
	return ""
}

func (x *Config) GetWINDOW() uint32 {
	if x != nil && x.WINDOW != nil {
		return *x.WINDOW
	}
	return 0
}

func (x *Config) GetGRP_DLY() uint32 {
	if x != nil && x.GRP_DLY != nil {
		return *x.GRP_DLY
	}
	return 0
}

// Scaling information structure used in Config Frame 3 for Phasors.
type PhasorScaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First 4-byte word (modification flags, type, component, user)
	Flags *uint32 `protobuf:"varint,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// Second 4-byte word (Y - scale factor)
	ScaleFactor *float32 `protobuf:"fixed32,2,opt,name=scale_factor,json=scaleFactor,proto3,oneof" json:"scale_factor,omitempty"`
	// Third 4-byte word (theta - angle offset in radians)
	AngleOffset *float32 `protobuf:"fixed32,3,opt,name=angle_offset,json=angleOffset,proto3,oneof" json:"angle_offset,omitempty"`
}

func (x *PhasorScaling) Reset() {
	*x = PhasorScaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhasorScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhasorScaling) ProtoMessage() {}

func (x *PhasorScaling) ProtoReflect() protoreflect.Message {
	mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhasorScaling.ProtoReflect.Descriptor instead.
func (*PhasorScaling) Descriptor() ([]byte, []int) {
	return file_zaphiro_c37118_v1_conf_proto_rawDescGZIP(), []int{3}
}

func (x *PhasorScaling) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *PhasorScaling) GetScaleFactor() float32 {
	if x != nil && x.ScaleFactor != nil {
		return *x.ScaleFactor
	}
	return 0
}

func (x *PhasorScaling) GetAngleOffset() float32 {
	if x != nil && x.AngleOffset != nil {
		return *x.AngleOffset
	}
	return 0
}

// Scaling information structure used in Config Frame 3 for Analogs.
type AnalogScaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleFactor *float32 `protobuf:"fixed32,1,opt,name=scale_factor,json=scaleFactor,proto3,oneof" json:"scale_factor,omitempty"` // First 4 bytes (M - scale factor)
	Offset      *float32 `protobuf:"fixed32,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`                              // Last 4 bytes (B - offset)
}

func (x *AnalogScaling) Reset() {
	*x = AnalogScaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalogScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalogScaling) ProtoMessage() {}

func (x *AnalogScaling) ProtoReflect() protoreflect.Message {
	mi := &file_zaphiro_c37118_v1_conf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalogScaling.ProtoReflect.Descriptor instead.
func (*AnalogScaling) Descriptor() ([]byte, []int) {
	return file_zaphiro_c37118_v1_conf_proto_rawDescGZIP(), []int{4}
}

func (x *AnalogScaling) GetScaleFactor() float32 {
	if x != nil && x.ScaleFactor != nil {
		return *x.ScaleFactor
	}
	return 0
}

func (x *AnalogScaling) GetOffset() float32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

var File_zaphiro_c37118_v1_conf_proto protoreflect.FileDescriptor

var file_zaphiro_c37118_v1_conf_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x7a, 0x61, 0x70, 0x68, 0x69, 0x72, 0x6f, 0x2f, 0x63, 0x33, 0x37, 0x31, 0x31, 0x38,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x7a, 0x61, 0x70, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x63, 0x33, 0x37, 0x31, 0x31, 0x38, 0x2e, 0x76,
	0x31, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x61, 0x70, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x63, 0x33, 0x37, 0x31, 0x31, 0x38,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x61, 0x70, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x63, 0x33, 0x37, 0x31, 0x31, 0x38, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x44, 0x43,
	0x4f, 0x44, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x44, 0x43, 0x4f, 0x44,
	0x45, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x4f, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x53, 0x4f, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x52, 0x41, 0x43, 0x53, 0x45, 0x43, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x46, 0x52, 0x41, 0x43, 0x53, 0x45, 0x43, 0x12, 0x1b, 0x0a,
	0x09, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x42, 0x41, 0x53, 0x45, 0x12, 0x17, 0x0a, 0x07, 0x4e, 0x55,
	0x4d, 0x5f, 0x50, 0x4d, 0x55, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4e, 0x55, 0x4d,
	0x50, 0x4d, 0x55, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbf,
	0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x54, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x54, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x44, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x44, 0x43,
	0x4f, 0x44, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x48, 0x4e, 0x4d, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x48, 0x4e, 0x4d,
	0x52, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x4e, 0x4e, 0x4d, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x41, 0x4e, 0x4e, 0x4d, 0x52, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x47, 0x4e, 0x4d, 0x52,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x47, 0x4e, 0x4d, 0x52, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x48, 0x4e, 0x41, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x48,
	0x4e, 0x41, 0x4d, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x48, 0x55, 0x4e, 0x49, 0x54, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x48, 0x55, 0x4e, 0x49, 0x54, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x4e, 0x55, 0x4e, 0x49, 0x54, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x4e, 0x55,
	0x4e, 0x49, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x49, 0x47, 0x55, 0x4e, 0x49, 0x54, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x49, 0x47, 0x55, 0x4e, 0x49, 0x54, 0x12, 0x12, 0x0a,
	0x04, 0x46, 0x4e, 0x4f, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x46, 0x4e, 0x4f,
	0x4d, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x46, 0x47, 0x43, 0x4e, 0x54, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x43, 0x46, 0x47, 0x43, 0x4e, 0x54, 0x12, 0x1d, 0x0a, 0x08, 0x47, 0x5f, 0x50,
	0x4d, 0x55, 0x5f, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x47,
	0x50, 0x4d, 0x55, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x48, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x61, 0x70, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x63, 0x33, 0x37, 0x31, 0x31, 0x38, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x50, 0x48, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x12, 0x3a, 0x0a, 0x07, 0x41, 0x4e, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x61, 0x70, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x63, 0x33, 0x37, 0x31, 0x31, 0x38, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x41, 0x4e, 0x53, 0x43, 0x41, 0x4c, 0x45,
	0x12, 0x1c, 0x0a, 0x07, 0x50, 0x4d, 0x55, 0x5f, 0x4c, 0x41, 0x54, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x06, 0x50, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x50, 0x4d, 0x55, 0x5f, 0x4c, 0x4f, 0x4e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x02, 0x52, 0x06, 0x50, 0x4d, 0x55, 0x4c, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x50, 0x4d, 0x55, 0x5f, 0x45, 0x4c, 0x45, 0x56, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03,
	0x52, 0x07, 0x50, 0x4d, 0x55, 0x45, 0x4c, 0x45, 0x56, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x53, 0x56, 0x43, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x53, 0x56, 0x43, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05,
	0x52, 0x06, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x47,
	0x52, 0x50, 0x5f, 0x44, 0x4c, 0x59, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x06,
	0x47, 0x52, 0x50, 0x44, 0x4c, 0x59, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x5f,
	0x50, 0x4d, 0x55, 0x5f, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x4d, 0x55, 0x5f, 0x4c,
	0x41, 0x54, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x4d, 0x55, 0x5f, 0x4c, 0x4f, 0x4e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x50, 0x4d, 0x55, 0x5f, 0x45, 0x4c, 0x45, 0x56, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x53, 0x56, 0x43, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x44, 0x4c, 0x59,
	0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x50, 0x68, 0x61, 0x73, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0b, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x70, 0x0a, 0x0d, 0x41, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2a, 0xb6, 0x01, 0x0a, 0x09,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x32, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x33, 0x10, 0x06, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x63, 0x33, 0x37, 0x31, 0x31, 0x38,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zaphiro_c37118_v1_conf_proto_rawDescOnce sync.Once
	file_zaphiro_c37118_v1_conf_proto_rawDescData = file_zaphiro_c37118_v1_conf_proto_rawDesc
)

func file_zaphiro_c37118_v1_conf_proto_rawDescGZIP() []byte {
	file_zaphiro_c37118_v1_conf_proto_rawDescOnce.Do(func() {
		file_zaphiro_c37118_v1_conf_proto_rawDescData = protoimpl.X.CompressGZIP(file_zaphiro_c37118_v1_conf_proto_rawDescData)
	})
	return file_zaphiro_c37118_v1_conf_proto_rawDescData
}

var file_zaphiro_c37118_v1_conf_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zaphiro_c37118_v1_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_zaphiro_c37118_v1_conf_proto_goTypes = []interface{}{
	(FrameType)(0),        // 0: zaphiro.c37118.v1.FrameType
	(*ConfFrame)(nil),     // 1: zaphiro.c37118.v1.ConfFrame
	(*ConfHeader)(nil),    // 2: zaphiro.c37118.v1.ConfHeader
	(*Config)(nil),        // 3: zaphiro.c37118.v1.Config
	(*PhasorScaling)(nil), // 4: zaphiro.c37118.v1.PhasorScaling
	(*AnalogScaling)(nil), // 5: zaphiro.c37118.v1.AnalogScaling
}
var file_zaphiro_c37118_v1_conf_proto_depIdxs = []int32{
	2, // 0: zaphiro.c37118.v1.ConfFrame.header:type_name -> zaphiro.c37118.v1.ConfHeader
	3, // 1: zaphiro.c37118.v1.ConfFrame.configs:type_name -> zaphiro.c37118.v1.Config
	4, // 2: zaphiro.c37118.v1.Config.PHSCALE:type_name -> zaphiro.c37118.v1.PhasorScaling
	5, // 3: zaphiro.c37118.v1.Config.ANSCALE:type_name -> zaphiro.c37118.v1.AnalogScaling
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_zaphiro_c37118_v1_conf_proto_init() }
func file_zaphiro_c37118_v1_conf_proto_init() {
	if File_zaphiro_c37118_v1_conf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zaphiro_c37118_v1_conf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zaphiro_c37118_v1_conf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zaphiro_c37118_v1_conf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zaphiro_c37118_v1_conf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhasorScaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zaphiro_c37118_v1_conf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalogScaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zaphiro_c37118_v1_conf_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_zaphiro_c37118_v1_conf_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_zaphiro_c37118_v1_conf_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_zaphiro_c37118_v1_conf_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zaphiro_c37118_v1_conf_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zaphiro_c37118_v1_conf_proto_goTypes,
		DependencyIndexes: file_zaphiro_c37118_v1_conf_proto_depIdxs,
		EnumInfos:         file_zaphiro_c37118_v1_conf_proto_enumTypes,
		MessageInfos:      file_zaphiro_c37118_v1_conf_proto_msgTypes,
	}.Build()
	File_zaphiro_c37118_v1_conf_proto = out.File
	file_zaphiro_c37118_v1_conf_proto_rawDesc = nil
	file_zaphiro_c37118_v1_conf_proto_goTypes = nil
	file_zaphiro_c37118_v1_conf_proto_depIdxs = nil
}
